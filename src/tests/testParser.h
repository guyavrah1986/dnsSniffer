#pragma once

extern "C"
{
    #include "../parser/include/parser.h"
}

TEST(ParserTests, parseSingleDnsPacketAndVerifyItIsResponse)
{ 
	unsigned char dnsResponsePacket[] = 
	{
    0xfa, 0x16, 0x3e, 0x47, 0xdb, 0x61, 0x38, 0x10, 0xf0, 0x8c, 0x93, 0x40,
    0x08, 0x00, 0x45, 0x00, 0x00, 0x53, 0x36, 0x25, 0x00, 0x00, 0x7d, 0x11,
    0x33, 0x12, 0x93, 0xea, 0xf4, 0x04, 0x0a, 0x4c, 0x42, 0x28, 0x00, 0x35,
    0xce, 0x8c, 0x00, 0x3f, 0x41, 0x88, 0x23, 0x1f, 0x81, 0x80, 0x00, 0x01,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c,
    0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x04, 0x8e, 0xfa,
    0x4b, 0x2e, 0x00, 0x00, 0x29, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00
	};

	int expectedRes = 1;
	int res = parseDnsPacket(dnsResponsePacket);
	EXPECT_EQ(res, expectedRes);
}

TEST(ParserTests, parseSingleDnsPacketAndVerifyItIsQuery)
{
    unsigned char dnsQueryPacket[] =
    {
    0x00, 0x00, 0x5e, 0x00, 0x01, 0x42, 0xfa, 0x16,
    0x3e, 0x47, 0xdb, 0x61, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x4f, 0x5a, 0x22, 0x00, 0x00, 0x40, 0x11,
    0x4c, 0x19, 0x0a, 0x4c, 0x42, 0x28, 0x93, 0xea,
    0xf4, 0x04, 0xce, 0x8c, 0x00, 0x35, 0x00, 0x3b,
    0xd4, 0xaf, 0x23, 0x1f, 0x01, 0x20, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f,
    0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
    0x29, 0x04, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x0a, 0x00, 0x08, 0x49, 0xd0, 0xfc,
    0x7a, 0x30, 0x3c, 0x10, 0x2f
    };

    int expectedRes = 0;
    int res = parseDnsPacket(dnsQueryPacket);
	EXPECT_EQ(res, expectedRes);
}

TEST(ParserTests, parseSingleDnsResponsePacketThatRidesOnUdp)
{ 
	unsigned char dnsResponsePacket[] = 
	{
     //Ethernet header
    0xfa, 0x16, 0x3e, 0x47, 0xdb, 0x61, 0x38, 0x10, 0xf0, 0x8c, 0x93, 0x40,
    0x08, 0x00,

    // IPv4 header
    0x45, 0x00, 0x00, 0x53, 0x36, 0x25, 0x00, 0x00, 0x7d, 0x11,
    0x33, 0x12, 0x93, 0xea, 0xf4, 0x04, 0x0a, 0x4c, 0x42, 0x28, 0x00, 0x35,
    0xce, 0x8c, 0x00, 0x3f, 0x41, 0x88, 0x23, 0x1f, 0x81, 0x80, 0x00, 0x01,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c,
    0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x04, 0x8e, 0xfa,
    0x4b, 0x2e, 0x00, 0x00, 0x29, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00
	};

	int expectedRes = 1;
	int res = parseDnsPacket(dnsResponsePacket);
	EXPECT_EQ(res, expectedRes);
}

TEST(ParserTests, parseSingleDnsResponsePacketThatRidesOnTcp)
{ 
	unsigned char dnsResponsePacket[] = 
	{
    0xfa, 0x16, 0x3e, 0x47, 0xdb, 0x61, 0x38, 0x10,
    0xf0, 0x8c, 0x93, 0x40, 0x08, 0x00,
    0x45, 0x60,
    0x00, 0x6d, 0xf0, 0x03, 0x00, 0x00, 0x76, 0x06,
    0xf7, 0xa3, 0x08, 0x08, 0x08, 0x08, 0x0a, 0x4c,
    0x42, 0x28, 0x00, 0x35, 0xad, 0xbd, 0x20, 0x7d,
    0xfc, 0x9b, 0x5f, 0x8b, 0xdc, 0x32, 0x80, 0x18,
    0x04, 0x1a, 0x02, 0x40, 0x00, 0x00, 0x01, 0x01,
    0x08, 0x0a, 0xcd, 0xd8, 0x65, 0x26, 0x14, 0x77,
    0x9f, 0xae, 0x00, 0x37, 0xcc, 0x73, 0x81, 0x80,
    0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03,
    0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
    0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
    0x01, 0x2c, 0x00, 0x04, 0x8e, 0xfa, 0x4b, 0x8e,
    0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00
    };
    
	int expectedRes = 1;
	int res = parseDnsPacket(dnsResponsePacket);
	EXPECT_EQ(res, expectedRes);
}

TEST(ParserTests, parseSingleDnsResponsePacketThatDoesNotRideOnTcpNorUdp)
{ 
	unsigned char dnsResponsePacket[] = 
	{
    0xfa, 0x16, 0x3e, 0x47, 0xdb, 0x61, 0x38, 0x10,
    0xf0, 0x8c, 0x93, 0x40, 0x08, 0x00,
    0x45, 0x60,
    0x00, 0x6d, 0xf0, 0x03, 0x00, 0x00, 0x76, 0x05, // --> this is the faulty value!
    0xf7, 0xa3, 0x08, 0x08, 0x08, 0x08, 0x0a, 0x4c,
    0x42, 0x28, 0x00, 0x35, 0xad, 0xbd, 0x20, 0x7d,
    0xfc, 0x9b, 0x5f, 0x8b, 0xdc, 0x32, 0x80, 0x18,
    0x04, 0x1a, 0x02, 0x40, 0x00, 0x00, 0x01, 0x01,
    0x08, 0x0a, 0xcd, 0xd8, 0x65, 0x26, 0x14, 0x77,
    0x9f, 0xae, 0x00, 0x37, 0xcc, 0x73, 0x81, 0x80,
    0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03,
    0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
    0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
    0x01, 0x2c, 0x00, 0x04, 0x8e, 0xfa, 0x4b, 0x8e,
    0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00
    };
    
	int expectedRes = -1;
	int res = parseDnsPacket(dnsResponsePacket);
	EXPECT_EQ(res, expectedRes);
}